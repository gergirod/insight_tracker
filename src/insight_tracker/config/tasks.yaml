research_task:
  description: >
    Research and gather all available links related to the specified person delimited by triple '. The links should include:
      - LinkedIn Profile
      - X Profile
      - Professional profiles (company website, LinkedIn, professional associations, etc.)
      - News articles and press releases
      - Personal websites or blogs
      - Any other relevant online resources 
      - Always focus on the specific profile and name provided and do no create or make up any link

      Use various online resources such as search engines, social media platforms, and professional networks to find these links.
      Ensure the links are accurate and up-to-date.
      Always Focus on the professional aspect of the profile

      The purpose of this task is to compile a comprehensive list of all online links related to this person for further analysis.

      '''{profile} from {company}'''
  expected_output: >
    A python list of relevant links.

gather_info_task:
  description: >
    Given a list of relevant links, your task is to scrape and collect detailed information about the specified person. The information should include:
    

      complete the following pydantic model with the information gathered from the links

      class ProfessionalProfile(BaseModel):
        full_name: Optional[str] = Field(
          ..., description="The full name of the profile"
        )
        current_job_title: Optional[str] = Field(
          None, description="The current job title of the profile"
        )
        profesional_background: Optional[str] =  Field(
          None, description="The professional background of the profile"
        )
        past_jobs: Optional[str] = Field(
          None, description="The past jobs of the profile"
        )
        key_achievements: Optional[str] = Field(
          None, description="The key achievements of the profile"
        )
        contact: Optional[str] = Field(
          None, description="The contact information of the profile"
        )

    Use the provided scraping tools to gather this information. Do not fabricate any details; ensure all information is accurate and current.
    The purpose of this task is to compile a comprehensive and structured profile of the individual for further analysis.
  expected_output: >
      return the ProfessionalProfile pydantic model

write_invitation_email_task:
  description: >
    Using all the information from gather_info_task draft an email with no more than 120 words that invites this person to discuss a possible opportunnity. The email should be personalized, taking into account the individual's professional background, key achievements, and interests. Ensure the email tone is professional, respectful, and engaging.

    The email should include:
    - A personalized greeting
    - A brief introduction of yourself and your company
    - Acknowledgment of the individual's professional background and key achievements
    - A clear and concise explanation of why you are reaching him out.
    - An invitation to discuss in more detail the path foward as a client
    - A polite closing and call to action

    The purpose of this task is to create a compelling and well-structured email that increases the likelihood of a positive response from the individual.

  expected_output: >
    A well-structured and personalized email with no more than 120 words in the following format:

    Subject: Invitation to Discuss [Product Name]

    Dear [Full Name],

    [Body]

    Best regards,
    [Your Name]
    [Your Job Title]
    [Your Company]
    [Your Contact Information]

#Company Insight

company_linkedin_research_task:
  description: >
    Your task is to research and gather all relevant online links related to the specified company within the {industry} industry. For this task you should follow this steps:

    1) Search The company's LinkedIn profile
    2) Search all other sections inside the Linkedin profile for example about, posts, jobs, people and insights
    No links should be fabricated or created.

    The purpose of this task is to compile a comprehensive and verified list of all relevant online links related to {company} for further analysis.

    Company to research: '''{company}''' from the '''{industry}''' industry.
  expected_output: >
    A Python list containing the linkedin websites .

company_website_research_task:
  description: >
    With the list of links provided, your task is to scrape and gather detailed information about company. Focus on scraping data from LinkedIn.
    THe main data you need to search in the company website that is mainly in the about section of the linkedin profile

  expected_output: >
    a string containing company main website.

company_research_task:
  description: >
    with the string provided by company_website_research_task scrape the website to get all the links and sublinks inside the website related to services, news, clients, partners, awards/recognitions, industries, and blog.
    create a list with all the links/sublinks

    once you have the final list of links, 
    scrape each of the links and gather the following information:
      - Summary: a brief description of the company's main activities.
      - Website: the company's website.
      - Industry: the industry of the company.
      - Services: a list of services the company offers (just the name of the service).
      - Industries: a list of industries the company operates in (just the name of the industry).
      - Awards/Recognitions: a list of awards and recognitions the company has received (just the name of the award).
      - Clients/Partners: a list of clients and partners of the company.

      once you have all the information please create a pydantic model with the following format:
      if any of the information is not available please fill it with None
      
      class Company(BaseModel):
        company_name: Optional[str] = Field(
          ..., description="the name of the company"
        )
        company_website: Optional[str] =  Field(
          None, description="the website of the company"
        )
        company_summary: Optional[str] = Field(
          None, description="the summary of the company"
        )
        company_industry: Optional[str] = Field(
          None, description="the industry of the company"
        )
        company_services: Optional[str] = Field(
          None, description="the services of the company"
        )
        company_industries: Optional[str] = Field(
          None, description="the industries of the company"
        )
        company_awards_recognitions: Optional[str] = Field(
          None, description="the awards and recognitions of the company"
        )
        company_clients_partners: Optional[str] = Field(
          None, description="the clients and partners of the company"
        )
      
  expected_output: >
      return Company pydantic model

company_people_research_task:
  description: >
    with the url string provided by company_website_research_task or with the company website, your task is to scrape and gather detailed information about the specified company. format:

    Use the link with the ScrapingCustomTool to scrape the url the website from company_website_research_task.
    Ensure all information is accurate, current, and reflects the latest data available. Avoid fabricating any details.

    follow this steps :
    1. Search for any link related to people, persons or team and return a link
    2. with that link scrape and get the sublinks of each employee detail.
    3. Do not create or make any link always check that the url link from the profile match the company name
    4. Finally for those links create a lisf with the profile_link to the detail.
    
    Notes :
      If you could found any link return a empty list
    
    The purpose of this task is to compile a detailed and structured list of people working at the firm
  expected_output: >
    A Python list the following Format: 
      - profile_link

    return a python list

company_persons_scraping_task:
  description: >
    base on the url provided as an input {category} scrape and create a list of people in the following format:
      - Full Name 
      - Role 
      - Url

    include also the url for the detail of that particular profile
  expected_output: >
    A Python list filtered by role to be socio or partner that contains elements in the following format :
      - Full Name:[Full Name]
      - Role:[Role]
      - Url:[Url]

company_persons_detail_scraping_task:
  description: >
    base on the final output from company_people_research_task.
    follow this steps:
    1. Iterate all the elements in the list.
    2. For each element Scrape the profile_link and gather the following information of the person in the following format 
   
      - Full Name
      - Profile Image Url:
      - Role:
      - Contact:
      - Background Experience:

    3. create a list that contains the element just created.
    4. if the new list size dont match with the list provided by company_people_research_task. do all again until it matched the size.

  expected_output: >
    A Python list that contains the same amount of elements from company_people_research_task in the following Format: 
      - full_name:[Full Name]
      - profile_image: [Profile Image Url]
      - role: [Role]
      - contact: [Contact]
      - background_experience: [Background Experience]


python_developer_task:
  description: >
   Base on the list provided by company_persons_detail_scraping_task Ensure to fill out the `Profiles` model with as much information as possible.

    for each element of the list create an instance of 
        class Profile(BaseModel):
          full_name: Optional[str]
          profile_image: Optional[str]
          role: Optional[str]
          contact: Optional[str]
          background_experience: Optional[str]

       and add it to the profile_list from the Profiles model   

  expected_output: >
    Fill out the `Profiles` model with as much information as possible and return it.


data_format_task:
  description: >
    Base on the list provided by company_people_research_task ensure to create an instance of the `Employees` model .

    '''class Employess(BaseModel):
      employee_list : Optional[List[str]]'''

    for each element of the list create add it to employee_list from Employees model
    ensure that the new the employee_list contains the same amounts of elements as the list provided by company_people_research_task
  expected_output: >
    return `Employees` model with the employee_list full of the links provided from company_people_research_task.

write_invitation_email_task_two:
  description: >
    Using all the information from company_research_task and iterate all the python_developer_task final output, draft an email with no more than 160 words that invites each of person to discuss a possible opportunnity. The email should be personalized, taking into account the individual's professional background. Ensure the email tone is professional, respectful, and engaging.

    for all the elements inside python_developer_task create the following email:
    The email should include:
    - A personalized greeting
    - A brief introduction of yourself and your company
    - Acknowledgment of the company insight from company_research_task and individual's professional background from python_developer_task
    - A clear and concise explanation of why you are reaching him out.
    - An invitation to discuss in more detail the path foward as a client
    - A polite closing and call to action

    The purpose of this task is to create a compelling and well-structured email that increases the likelihood of a positive response from the individual.

  expected_output: >
    A well-structured and personalized email for all the with elements provided from the python_developer_task no more than 120 words in the following format:

    Subject: Invitation to Discuss [Product Name]

    Dear [Full Name],

    [Body]

    Best regards,
    [Your Name]
    [Your Job Title]
    [Your Company]
    [Your Contact Information]


company_person_detail_scraping_task:
  description: >
    base on the {url} .
    follow this steps:
    1. Iterate all the elements in the list.
    2. Scrape the url and gather the following information of the person in the following format 
    

      - Full Name
      - Profile Image Url:
      - Company Name:
      - Role:
      - Contact:
      - Background Experience:

    3 . Ensure to fill out the `Profiles` model with as much information as possible 
    4.  taking into account the full name and background experience fill the outreach email with a draft email with no more than 160 words that invites each of person to discuss a possible opportunnity. The email should be personalized, taking into account the individual's information. Ensure the email tone is professional, respectful, and engaging. 
        The email should include:
          - A personalized greeting
          - A brief introduction of yourself and your company
          - Acknowledgment of the individual's professional background from the Profile pydantic model
          - A clear and concise explanation of why you are reaching him out.
          - An invitation to discuss in more detail the path foward as a client
          - A polite closing and call to action 

        class Profile(BaseModel):
          full_name: Optional[str]
          profile_image: Optional[str]
          company_name : Optional[str]
          role: Optional[str]
          contact: Optional[str]
          background_experience: Optional[str]
          outreach_email : Optional[str]


  expected_output: >
    return class Profile model


write_invitation_email_task_three:
  description: >
    Using the information from the pydantic model Profile from the company_person_detail_scraping_task, draft an email with no more than 160 words that invites each of person to discuss a possible opportunnity. The email should be personalized, taking into account the individual's information. Ensure the email tone is professional, respectful, and engaging.

    The email should include:
    - A personalized greeting
    - A brief introduction of yourself and your company
    - Acknowledgment of the individual's professional background from the Profile pydantic model
    - A clear and concise explanation of why you are reaching him out.
    - An invitation to discuss in more detail the path foward as a client
    - A polite closing and call to action

    The purpose of this task is to create a compelling and well-structured email that increases the likelihood of a positive response from the individual.

  expected_output: >
    A well-structured and personalized email from the Pydantic model provided by company_person_detail_scraping_task data with no more than 160 words in the following format:

    Subject: Invitation to Discuss [Product Name]

    Dear full_name,

    [Body]

    Best regards,
    [Your Name]
    [Your Job Title]
    [Your Company]
    [Your Contact Information]
